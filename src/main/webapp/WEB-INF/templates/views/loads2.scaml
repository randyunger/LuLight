- import org.runger.lulight.LightingLoad
- import org.runger.lulight.LoadSet
- import org.runger.lulight.LoadState
- import org.runger.lulight.ConcMap
- import org.runger.lulight.BulbType
- import org.runger.lulight.FilterSet

- attributes("title") = "Loads - LuLight"

-@ val byArea: Map[String, Set[LightingLoad]]
/-@ val fullStateJson: String
-@ val bulbTypes: Set[BulbType.Type]
-@ val filterSetJson: String

.main2
    .scene(name="Watch TV")
        %span.scene
            Watch TV
    .scene
        %span.scene
            Button 2
    .scene
        %span.scene
            Button 3
    .scene
        %span.scene
            Button 4

%h2(data={filterSetJson})
    By Bulb Type

- for(bulbType <- bulbTypes)
    .area
        %span.name
            #{bulbType.code}
        %span.id
            #{bulbType.code}
        %span.level
            ???
        %span.slider
            %input.filtered(type="range" name={bulbType.code} id={"range"+bulbType.code} value=0)


- for(areaName <- byArea.keySet)
    .area
        %h2= {areaName}
        - for(loads <- byArea.get(areaName))
            - for(load <- loads)
                - val lev = load.state.map(_.level).getOrElse(0)
                .load
                    %span.name
                        #{load.outputName}
                    %span.id
                        #{load.id}
                    %span.level
                        #{lev}
                    %span.slider
                        %input.range(type="range" name={load.id} id={"range"+load.id} value={lev})

%label
    %input#toggleId(type="checkbox")
    Show Ids

/%div= fullStateJson

/%script(type="application/json" id="fullStateScript") =fullStateJson

/:javascript
/    #{fullStateJson}

%script(type="text/javascript" src="js/jquery-2.1.4.min.js")
%script(type="text/javascript" src="js/loads.js")

